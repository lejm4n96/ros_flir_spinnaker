#! /usr/bin/env python

'''
   @file phmSpinnaker.cfg
   @author Parham Nooralishahi
   @date November 29, 2020
   @brief A wrapper for Spinnaker SDK as part of Multimodal imagery data platform for drone-enabled inspection of industrial sites
   @attention Copyright (C) 2020
   @attention MiViM
   @attention Universite Laval
'''

'''
    Commands:
    * Auto Focus
'''

PACKAGE='ros_flir_spinnaker'

from dynamic_reconfigure.parameter_generator_catkin import *

class ConfigLevel:
  RECONFIGURE_RUNNING = 0
  RECONFIGURE_STOP = 1

gen = ParameterGenerator()

gen.add("acquisition_frame_rate", double_t, ConfigLevel.RECONFIGURE_STOP, "User controlled acquisition frame rate in Hertz (frames per second).", 30, 0, 60)

##################### Image Format Control #####################
gen.add("frame_width", int_t, ConfigLevel.RECONFIGURE_STOP, "Image width provided by the device (in pixels)", 640, 0, 65535)
gen.add("frame_height", int_t, ConfigLevel.RECONFIGURE_STOP, "Image width provided by the device (in pixels)", 480, 0, 65535)
gen.add("frame_x_offset", int_t, ConfigLevel.RECONFIGURE_STOP, "Horizontal offset from the origin to the ROI (in pixels)", 0, 0, 65535)
gen.add("frame_y_offset", int_t, ConfigLevel.RECONFIGURE_STOP, "Vertical offset from the origin to the ROI (in pixels)", 0, 0, 65535) 

coding = gen.enum([
    gen.const("Mono8", str_t, "Mono8", ""),
    gen.const("Mono16", str_t, "Mono16", "")
], "Image Pixel Format: Camera pixel format")

gen.add("frame_pixel_format", str_t, ConfigLevel.RECONFIGURE_STOP, "Frame\'s Pixel Format", "Mono8", edit_method = coding)

mode = gen.enum([
    gen.const("Thermal", str_t, "Thermal", "Thermal Image"),
    gen.const("MSX", str_t, "MSX", "Thermal and Visual Fusion"),
    gen.const("Visual", str_t, "Visual", "Visual Image")
], "Image Mode")

gen.add("image_mode", str_t, ConfigLevel.RECONFIGURE_STOP, "Image Mode", "Thermal", edit_method = mode)

##################### Chunk Data Control #####################
gen.add("chunk_mode_active", bool_t, ConfigLevel.RECONFIGURE_STOP, "Activates the inclusion of chunk data", False)
gen.add("chunk_enable", bool_t, ConfigLevel.RECONFIGURE_STOP, "Enables the inclusion of chunk data", False)

##################### Focus Control #####################
direct = gen.enum([
    gen.const("Stop", str_t, "Stop", ""),
    gen.const("Far", str_t, "Far", ""),
    gen.const("Near", str_t, "Near", "")
], "Focus Direction")

gen.add("focus_direction", str_t, ConfigLevel.RECONFIGURE_RUNNING, "Focus Direction", "Stop", edit_method = direct)

fmethod = gen.enum([
    gen.const("Coarse", str_t, "Coarse", ""),
    gen.const("Fine", str_t, "Fine", "")
], "Auto Focus Method")

gen.add("focus_method", str_t, ConfigLevel.RECONFIGURE_RUNNING, "Auto Focus Method", "Coarse", edit_method = fmethod)

##################### Camera Control #####################
adjust = gen.enum([
    gen.const("Auto", str_t, "Auto", ""),
    gen.const("Manual", str_t, "Manual", "")
], "Image Adjust Mode")

gen.add("adjust_mode", str_t, ConfigLevel.RECONFIGURE_RUNNING, "Image Adjust Mode", "Auto", edit_method = adjust)

ltorch = gen.enum([
    gen.const("On", str_t, "On", ""),
    gen.const("Off", str_t, "Off", "")
], "Camera Lens Torch")
gen.add("lens_torch", str_t, ConfigLevel.RECONFIGURE_RUNNING, "Camera Lens Torch", "Off", edit_method = ltorch)

##################### Object Parameters #####################
# gen.add('reflected_temperature', double_t, ConfigLevel.RECONFIGURE_STOP, 'Ambient temperature reflected in object (Kelvin)', 293.149, 0, 5000)

exit(gen.generate(PACKAGE, "phm_flir_spinnaker", "phmSpinnaker"))